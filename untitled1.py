# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VAR4z7vKvW-cFx7C998n6uiJ_8rD1vDI
"""

!pip install requests beautifulsoup4 openai langchain-openai

import requests
from bs4 import BeautifulSoup

def extract_text_from_url(url):
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, "html.parser")

        # Remove script and style elements
        for script_or_style in soup(['script', 'style']):
            script_or_style.decompose()

        texto = soup.get_text(separator=' ')

        # Clean the text
        linhas = (line.strip() for line in texto.splitlines())
        parts = (phrase.strip() for line in linhas for phrase in line.split() if phrase)
        texto_limpo = '\n'.join(part for part in parts if part)

        return texto_limpo
    else:
        print(f"Failed to fetch the URL. Status code: {response.status_code}")
        return None

# Example usage
text = extract_text_from_url('https://dev.to/kenakamu/azure-open-ai-in-vnet-3alo')
print(text)

from langchain_openai.chat_models.azure import AzureChatOpenAI

client = AzureChatOpenAI(
    azure_endpoint="https://oai-dio-bootcamp-dev-eastus-054.openai.azure.com/",
    api_key="5nZM2IfsyAPIbR1Zzg0V1W49goZj9uz5mjixtn0XLXKpCYUCh5KzJQQJ99AKACHYHv6XJ3w3AAABACOGRU3C",
    api_version="2024-02-15-preview",
    deployment_name="gpt-4o-mini",
    max_retries=0
)

def translate_article(text, lang):
    messages = [
        {"role": "system", "content": "Você atua como tradutor de textos"},
        {"role": "user", "content": f"Traduza o '{text}' para o idioma {lang} e responda em markdown"}
    ]

    try:
        response = client.invoke(messages)
        print(response.content)
        return response.content
    except Exception as e:
        print(f"An error occurred: {e}")

# Call the translation function
translated_text = translate_article("ciao sono giovanna", "português")

def extract_text_from_url(url):
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.content, 'html.parser')
        paragraphs = soup.find_all('p')
        text = ' '.join([para.get_text() for para in paragraphs])
        return text
    else:
        raise Exception("Error fetching the URL")

def translate_article(text, lang):
    messages = [
        {"role": "system", "content": "Você atua como tradutor de textos"},
        {"role": "user", "content": f"Traduza o '{text}' para o idioma {lang} e responda em markdown"}
    ]

    try:
        response = client.invoke(messages)
        return response.content
    except Exception as e:
        print(f"An error occurred: {e}")

# URL para extrair texto
url = "https://it.wikipedia.org/wiki/Lombardia"

try:
    text = extract_text_from_url(url)
    article = translate_article(text, "pt-br")
    print(article)
except Exception as e:
    print(e)